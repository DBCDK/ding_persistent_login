<?php

/**
 * @file
 * Provide persistent login for Ding users.
 */

/**
 * Implements hook_user_login().
 * persistent_login delete the old database entry, create the cookie, and make a new db entry in this step
 */
function ding_persistent_login_user_login(&$edit, $account) {
  if (!empty($edit['values']['persistent_login'])) {
    $roles = array_values($GLOBALS['user']->roles);
    if (user_is_logged_in() && sizeof($roles) == 1 && $roles[0] == 'authenticated user' && ding_user_is_provider_user($account)) {
      $creds = ding_user_get_creds($account);
      ding_persistent_login_save_creds($account->mail, $creds);
    }
  }
}

/**
 * Implements hook_user_logout().
 * delete the old database entry
 */
function ding_persistent_login_user_logout($account) {
  ding_persistent_login_get_creds($account->mail, 1);
}

/**
 * Return the ding_user credentials from database
 */
function ding_persistent_login_get_creds($uid, $delete = FALSE) {

  $ok = BibdkUser::instance()->getPersistent($uid);
  if (!$ok || $delete) {
    $ok = BibdkUser::instance()->deletePersistent($uid);
    $deletereturn = BibdkUser::instance()->deletePersistentLoginData($uid);
    return FALSE;
  }
  $creds = BibdkUser::instance()->getPersistent($uid);
  return $creds;
}

/**
 * Save the ding_user credentials
 *
 */
function ding_persistent_login_save_creds($uid, $creds) {
  $ok = BibdkUser::instance()->setPersistent($uid,$creds);
  if (!$ok){
    return FALSE;
  }
  else {
    return TRUE;
  }
}

